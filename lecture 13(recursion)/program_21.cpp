// subsequence of string
// You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

// A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.
// Sample Input 1:
// abc
// Sample Output 1:
// a ab abc ac b bc c

#include <bits/stdc++.h> 
using namespace std;
void solve(string str,string output,int index,vector<string> &ans){
	// base case
	if(index>=str.length()){
		ans.push_back(output);
		return;
	}
	// exclude
	solve(str,output,index+1,ans);

	// include
	char element=str[index];
	output.push_back(element);
	solve(str,output,index+1,ans);
}
vector<string> subsequences(string str){
	
	// Write your code here
	vector<string>ans;
	string output="";
    int index=0;
    solve(str,output,index,ans);
	// done to erase the 1 element (empty set(phi)) as the answer dosen't want it
	ans.erase(ans.begin());
    return ans;
	
}

int main(){
    string str="abc";
    vector<string> ans=subsequences(str);
    for(int i=0;i<ans.size();i++){
        cout<<ans[i]<<" ";
    }
    return 0;
}